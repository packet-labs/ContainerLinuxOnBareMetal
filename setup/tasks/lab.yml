- set_fact:
    lab_name: "{{ inventory_hostname }}"

- debug:
    msg: "Starting setup for {{ lab_name }}..."

- name: Setup user
  delegate_to: localhost
  user:
    name: "{{ lab_name }}"
    shell: /bin/bash
    password: "{{ lab_password }}"
    generate_ssh_key: yes
  tags:
    - user
    - ssh

- name: Template the cluster.tf
  delegate_to: localhost
  template:
    src: cluster.tf
    dest: "/home/{{ lab_name }}/cluster.tf"
    owner: "{{ lab_name }}"
    group: "{{ lab_name }}"

- name: Template the cluster.tfvars
  delegate_to: localhost
  template:
    src: cluster.tfvars.j2
    dest: "/home/{{ lab_name }}/cluster.tfvars"
    owner: "{{ lab_name }}"
    group: "{{ lab_name }}"

- name: Run terraform
  delegate_to: localhost
  terraform:
    project_path: "/home/{{ lab_name }}/"
    state: "{{ terraform_state | default('present') }}"
    force_init: true
    workspace: "{{ lab_name }}" # or state_file
    variables_file: "/home/{{ lab_name }}/cluster.tfvars"
  register: terraform
  tags:
    - terraform
    - terraform-apply

- name: debug
  debug:
    msg: "{{ terraform.outputs }}"

- name: Set IP facts
  set_fact:
    hosts_ips: "{{ terraform.outputs.hosts_ips.value }}"
  when:
    - terraform_state != 'absent'

- name: Template the inventory.ini
  delegate_to: localhost
  template:
    src: inventory.ini.j2
    dest: "/home/{{ lab_name }}/inventory.ini"
    owner: "{{ lab_name }}"
    group: "{{ lab_name }}"
  when:
    - terraform_state != 'absent'

- name: Template the .ssh/config
  delegate_to: localhost
  template:
    src: ssh_config.j2
    dest: "/home/{{ lab_name }}/.ssh/config"
    owner: "{{ lab_name }}"
    group: "{{ lab_name }}"
  when:
    - terraform_state != 'absent'

